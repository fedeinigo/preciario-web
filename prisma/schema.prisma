generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  team          String?
  role          Role      @default(usuario)

  accounts      Account[]
  sessions      Session[]
  goals         QuarterlyGoal[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id           String         @id @default(cuid())
  sku          String         @unique
  category     String
  name         String
  description  String         @default("")
  unitPrice    Decimal        @db.Decimal(12, 2)
  devHours     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  active       Boolean        @default(true)

  ProposalItem ProposalItem[]

  @@index([category, name])
}

model Proposal {
  id           String         @id
  seq          Int            @unique @default(autoincrement())
  userId       String?
  userEmail    String?
  companyName  String
  country      String
  countryId    String
  subsidiary   String
  subsidiaryId String

  totalAmount  Decimal        @db.Decimal(14, 2)
  totalHours   Int
  oneShot      Decimal        @db.Decimal(14, 2)

  docUrl       String?
  docId        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // NUEVO
  status       ProposalStatus @default(OPEN)
  wonAt        DateTime?
  deletedAt    DateTime?

  items        ProposalItem[]

  @@index([createdAt])
  @@index([userEmail])
  @@index([status])
  @@index([deletedAt])
}

model ProposalItem {
  id         String   @id @default(cuid())
  proposalId String
  itemId     String

  quantity   Int
  unitPrice  Decimal  @db.Decimal(12, 2)
  devHours   Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  item       Item     @relation(fields: [itemId], references: [id])
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([itemId])
}

model GlossaryLink {
  id        String   @id @default(cuid())
  label     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([label, url])
}

model FilialGroup {
  id        String          @id @default(cuid())
  title     String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  countries FilialCountry[]
}

model FilialCountry {
  id        String      @id @default(cuid())
  name      String
  groupId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  group     FilialGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, name])
  @@index([groupId])
}

model TeamCatalog {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuarterlyGoal {
  id        String   @id @default(cuid())
  userId    String
  year      Int
  quarter   Int
  amount    Decimal  @db.Decimal(14, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, quarter])
}

/**
 * NUEVO: Objetivo de equipo por trimestre (independiente de metas individuales)
 */
model TeamQuarterlyGoal {
  id        String   @id @default(cuid())
  team      String
  year      Int
  quarter   Int
  amount    Decimal  @db.Decimal(14, 2)
  updatedAt DateTime @updatedAt

  @@unique([team, year, quarter], name: "team_year_quarter")
}

enum Role {
  superadmin
  lider
  usuario
}

enum ProposalStatus {
  OPEN
  WON
  LOST
}

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/* =========================
   AUTH / USERS
========================= */
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  team          String?
  role          Role          @default(usuario)

  accounts      Account[]
  sessions      Session[]
  goals         QuarterlyGoal[]

  // Mapache portal
  mapacheTasks               MapacheTask[]              @relation("MapacheTaskCreator")   // creadas por el usuario
  mapacheAssignedTasks       MapacheTask[]              @relation("MapacheTaskAssignee")  // asignadas al usuario
  mapacheDeliverablesAdded   MapacheTaskDeliverable[]   @relation("MapacheDeliverableAddedBy") // entregables subidos por el usuario
  mapacheFilterPresets       MapacheFilterPreset[]      @relation("MapacheFilterPresetCreatedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* =========================
   CATÁLOGO / ITEMS
========================= */
model Item {
  id            String            @id @default(cuid())
  sku           String            @unique
  category      String
  name          String
  description   String            @default("")
  unitPrice     Decimal           @db.Decimal(12, 2)
  devHours      Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  active        Boolean           @default(true)

  translations  ItemTranslation[]
  ProposalItem  ProposalItem[]

  @@index([category, name])
}

model ItemTranslation {
  id          String       @id @default(cuid())
  itemId      String
  locale      LanguageCode
  name        String
  description String       @default("")
  category    String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, locale])
  @@index([locale])
}

model ItemCategory {
  id             String   @id @default(cuid())
  name           String
  normalizedName String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

/* =========================
   PROPUESTAS
========================= */
model Proposal {
  id           String         @id
  seq          Int            @unique @default(autoincrement())
  userId       String?
  userEmail    String?
  companyName  String
  country      String
  countryId    String
  subsidiary   String
  subsidiaryId String

  totalAmount  Decimal        @db.Decimal(14, 2)
  totalHours   Int
  oneShot      Decimal        @db.Decimal(14, 2)

  docUrl       String?
  docId        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Estado comercial
  status       ProposalStatus @default(OPEN)
  wonAt        DateTime?
  deletedAt    DateTime?

  // Integración Pipedrive (opcionales)
  pipedriveLink       String?
  pipedriveDealId     String?
  pipedriveSyncedAt   DateTime?
  pipedriveSyncStatus PipedriveSyncStatus?
  pipedriveSyncNote   String?

  // Trazabilidad canal/API
  createdChannel      CreatedChannel @default(API)
  createdByExternalId String?
  externalId          String?        @unique

  items        ProposalItem[]

  @@index([createdAt])
  @@index([userEmail])
  @@index([status])
  @@index([deletedAt])
  @@index([pipedriveDealId])
  @@index([createdChannel])
  @@index([createdByExternalId])
}

model ProposalItem {
  id         String   @id @default(cuid())
  proposalId String
  itemId     String

  quantity   Int
  unitPrice  Decimal  @db.Decimal(12, 2)
  devHours   Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  item       Item     @relation(fields: [itemId], references: [id])
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([itemId])
}

/* =========================
   OTROS
========================= */
model GlossaryLink {
  id        String   @id @default(cuid())
  label     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([label, url])
}

model FilialGroup {
  id        String          @id @default(cuid())
  title     String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  countries FilialCountry[]
}

model FilialCountry {
  id        String      @id @default(cuid())
  name      String
  groupId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  group     FilialGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, name])
  @@index([groupId])
}

model TeamCatalog {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuarterlyGoal {
  id        String   @id @default(cuid())
  userId    String
  year      Int
  quarter   Int
  amount    Decimal  @db.Decimal(14, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, quarter])
}

model TeamQuarterlyGoal {
  id        String   @id @default(cuid())
  team      String
  year      Int
  quarter   Int
  amount    Decimal  @db.Decimal(14, 2)
  updatedAt DateTime @updatedAt

  @@unique([team, year, quarter], name: "team_year_quarter")
}

/* =========================
   MAPACHE PORTAL
========================= */
model MapacheTask {
  id          String                @id @default(cuid())
  title       String
  description String?
  statusId    String
  status      MapacheStatus         @relation(fields: [statusId], references: [id])
  substatus   MapacheTaskSubstatus  @default(BACKLOG) // BACKLOG / WAITING_CLIENT / BLOCKED

  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Quién creó la tarea (manual o sistema)
  createdById String
  createdBy   User                  @relation("MapacheTaskCreator", fields: [createdById], references: [id], onDelete: Cascade)

  // Asignación (mapache responsable)
  assigneeId  String?
  assignee    User?                 @relation("MapacheTaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  // Intake simplificado (del formulario)
  requesterEmail           String   @default("") // requerido lógico; default evita fallas en migración
  clientName               String   @default("")
  presentationDate         DateTime?
  interlocutorRole         String?
  clientWebsiteUrls        String[] // text[] en Postgres
  directness               Directness           @default(DIRECT)
  pipedriveDealUrl         String?
  needFromTeam             MapacheNeedFromTeam  @default(OTHER)
  clientPain               String?  @db.Text
  productKey               String   @default("") // p.ej. "Wiser" / "Wiser PRO"
  managementType           String?
  docsCountApprox          Int?
  docsLengthApprox         String?
  integrationType          IntegrationType?
  integrationOwner         IntegrationOwner?
  integrationName          String?
  integrationDocsUrl       String?
  avgMonthlyConversations  Int?
  origin                   MapacheSignalOrigin  @default(MANUAL)

  // Entregables (alcance / cotización)
  deliverables             MapacheTaskDeliverable[]

  @@index([assigneeId])
  @@index([requesterEmail])
  @@index([clientName])
  @@index([origin])
  @@index([statusId])
}

model MapacheTaskDeliverable {
  id         String                 @id @default(cuid())
  taskId     String
  type       MapacheDeliverableType @default(SCOPE_AND_QUOTE)
  title      String
  url        String
  addedById  String?
  createdAt  DateTime               @default(now())

  task       MapacheTask            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  addedBy    User?                  @relation("MapacheDeliverableAddedBy", fields: [addedById], references: [id], onDelete: SetNull)

  @@index([taskId])
  @@index([addedById])
}

model MapacheBoard {
  id        String   @id @default(cuid())
  name      String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  columns MapacheBoardColumn[]

  @@index([position])
}

model MapacheBoardColumn {
  id        String   @id @default(cuid())
  boardId   String
  title     String
  position  Int
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board MapacheBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId, position])
}

model MapacheInsightsSnapshot {
  id              String   @id @default(cuid())
  bucket          String   @unique
  scope           String   @default("all")
  capturedAt      DateTime @default(now())
  total           Int
  dueSoonCount    Int
  overdueCount    Int
  statusTotals    Json
  substatusTotals Json
  needTotals      Json

  @@index([scope, capturedAt])
}

model MapacheFilterPreset {
  id          String   @id @default(cuid())
  name        String
  filters     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("MapacheFilterPresetCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([createdAt])
}

model MapacheStatus {
  id        String   @id @default(cuid())
  key       String   @unique
  label     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks MapacheTask[]
}

/* =========================
   ENUMS
========================= */
enum LanguageCode {
  es
  en
  pt
}

enum Role {
  superadmin
  admin
  lider
  usuario
}

enum ProposalStatus {
  OPEN
  WON
  LOST
}

enum PipedriveSyncStatus {
  OK
  ERROR
}

// (Proposals)
enum CreatedChannel {
  WEB
  API
  WHATSAPP
}

// (MapacheTask) estado principal
// (MapacheTask) subestado fino
enum MapacheTaskSubstatus {
  BACKLOG
  WAITING_CLIENT
  BLOCKED
}

// Directo / Partner
enum Directness {
  DIRECT
  PARTNER
}

// ¿Qué necesitás del team?
enum MapacheNeedFromTeam {
  QUOTE_SCOPE
  QUOTE
  SCOPE
  PRESENTATION
  OTHER
}

// Integración
enum IntegrationType {
  REST
  GRAPHQL
  SDK
  OTHER
}

enum IntegrationOwner {
  OWN
  THIRD_PARTY
}

// Origen de la señal
enum MapacheSignalOrigin {
  GOOGLE_FORM
  GENERATOR
  API
  MANUAL
  OTHER
}

// Tipo de entregable
enum MapacheDeliverableType {
  SCOPE
  QUOTE
  SCOPE_AND_QUOTE
  OTHER
}
